From fd7a9f546e35941da5d1a167e90346674a9b4cdb Mon Sep 17 00:00:00 2001
From: Rachid Saadi <rach.saadi@gmail.com>
Date: Sun, 26 Mar 2023 15:17:33 +0200
Subject: [PATCH] add support for go enum to ios

---
 bind/gen.go     | 33 +++++++++++++++++++++++++++-
 bind/gengo.go   | 13 ++++++++++-
 bind/genobjc.go | 57 +++++++++++++++++++++++++++++++++++++++++++------
 3 files changed, 95 insertions(+), 8 deletions(-)

diff --git a/bind/gen.go b/bind/gen.go
index 4fedfbe..c1173cf 100644
--- a/bind/gen.go
+++ b/bind/gen.go
@@ -71,6 +71,14 @@ type structInfo struct {
 	t   *types.Struct
 }
 
+// aliasInfo comes from Init and collects the auxiliary information
+// needed to generate bindings for an exported Go enum/const in a bound
+// package.
+type aliasInfo struct {
+	obj *types.TypeName
+	t   *types.Basic
+}
+
 // Generator contains the common Go package information
 // needed for the specific Go, Java, ObjC generators.
 //
@@ -94,6 +102,7 @@ type Generator struct {
 
 	interfaces []interfaceInfo
 	structs    []structInfo
+	aliases    []aliasInfo
 	otherNames []*types.TypeName
 	// allIntf contains interfaces from all bound packages.
 	allIntf []interfaceInfo
@@ -155,6 +164,12 @@ func (g *Generator) Init() {
 					g.structs = append(g.structs, structInfo{obj, t})
 				case *types.Interface:
 					g.interfaces = append(g.interfaces, interfaceInfo{obj, t, makeIfaceSummary(t)})
+				case *types.Basic:
+					if g.isSupported(t) {
+						g.aliases = append(g.aliases, aliasInfo{obj, t})
+					} else {
+						g.otherNames = append(g.otherNames, obj)
+					}
 				default:
 					g.otherNames = append(g.otherNames, obj)
 				}
@@ -411,7 +426,11 @@ func (g *Generator) cgoType(t types.Type) string {
 		}
 		g.errorf("unsupported pointer to type: %s", t)
 	case *types.Named:
-		return "int32_t"
+		if ok, aType := g.isAlias(t); ok {
+			return g.cgoType(aType)
+		} else {
+			return "int32_t"
+		}
 	default:
 		g.errorf("unsupported type: %s", t)
 	}
@@ -483,6 +502,15 @@ func (g *Generator) isSigSupported(t types.Type) bool {
 	return true
 }
 
+func (g *Generator) isAlias(t *types.Named) (bool, *types.Basic) {
+	for _, a := range g.aliases {
+		if a.obj.Type() == t {
+			return true, a.t
+		}
+	}
+	return false, nil
+}
+
 // isSupported reports whether the generators can handle the type.
 func (g *Generator) isSupported(t types.Type) bool {
 	if isErrorType(t) || isWrapperType(t) {
@@ -517,6 +545,9 @@ func (g *Generator) isSupported(t types.Type) bool {
 		switch t.Underlying().(type) {
 		case *types.Interface, *types.Pointer:
 			return g.validPkg(t.Obj().Pkg())
+		case *types.Basic:
+			ok, _ := g.isAlias(t)
+			return ok
 		}
 	}
 	return false
diff --git a/bind/gengo.go b/bind/gengo.go
index 8087c7a..aef5822 100644
--- a/bind/gengo.go
+++ b/bind/gengo.go
@@ -135,6 +135,8 @@ func (g *goGen) genWrite(toVar, fromVar string, t types.Type, mode varMode) {
 		switch u := t.Underlying().(type) {
 		case *types.Interface, *types.Pointer:
 			g.genToRefNum(toVar, fromVar)
+		case *types.Basic:
+			g.genWrite(toVar, fromVar, u, mode)
 		default:
 			g.errorf("unsupported, direct named type %s: %s", t, u)
 		}
@@ -424,7 +426,7 @@ func (g *goGen) genRead(toVar, fromVar string, typ types.Type, mode varMode) {
 			g.errorf("unsupported pointer type %s", t)
 		}
 	case *types.Named:
-		switch t.Underlying().(type) {
+		switch u := t.Underlying().(type) {
 		case *types.Interface, *types.Pointer:
 			hasProxy := true
 			if iface, ok := t.Underlying().(*types.Interface); ok {
@@ -460,6 +462,15 @@ func (g *goGen) genRead(toVar, fromVar string, typ types.Type, mode varMode) {
 			}
 			g.Printf("	}\n")
 			g.Printf("}\n")
+		case *types.Basic:
+			switch u.Kind() {
+			case types.String:
+				g.Printf("%s := decodeString(%s)\n", toVar, fromVar)
+			case types.Bool:
+				g.Printf("%s := %s != 0\n", toVar, fromVar)
+			default:
+				g.Printf("%s := %s.%s(%s)\n", toVar, g.pkgPrefix, t.Obj().Name(), fromVar)
+			}
 		default:
 			g.errorf("unsupported named type %s", t)
 		}
diff --git a/bind/genobjc.go b/bind/genobjc.go
index d098220..5de39d6 100644
--- a/bind/genobjc.go
+++ b/bind/genobjc.go
@@ -161,7 +161,14 @@ func (g *ObjcGen) GenH() error {
 			}
 		}
 	}
-	g.Printf("\n")
+
+	// Generating aliases as typedef
+	for _, a := range g.aliases {
+		g.Printf("typedef %s %s%s;\n", g.objcType(a.t), g.namePrefix, a.obj.Name())
+	}
+	if len(g.aliases) > 0 {
+		g.Printf("\n")
+	}
 
 	// Forward declaration of @class and @protocol
 	for _, s := range g.structs {
@@ -191,12 +198,21 @@ func (g *ObjcGen) GenH() error {
 	// const
 	// TODO: prefix with k?, or use a class method?
 	for _, obj := range g.constants {
-		if _, ok := obj.Type().(*types.Basic); !ok || !g.isSupported(obj.Type()) {
+		var bt *types.Basic
+		if t, ok := obj.Type().(*types.Basic); ok {
+			bt = t
+		} else if t, ok := obj.Type().(*types.Named); ok {
+			if ok, subtype := g.isAlias(t); ok {
+				bt = subtype
+			}
+		}
+
+		if bt == nil || !g.isSupported(bt) {
 			g.Printf("// skipped const %s with unsupported type: %s\n\n", obj.Name(), obj.Type())
 			continue
 		}
 		g.objcdoc(g.docs[obj.Name()].Doc())
-		switch b := obj.Type().(*types.Basic); b.Kind() {
+		switch bt.Kind() {
 		case types.String, types.UntypedString:
 			g.Printf("FOUNDATION_EXPORT NSString* _Nonnull const %s%s;\n", g.namePrefix, obj.Name())
 		default:
@@ -365,14 +381,23 @@ func (g *ObjcGen) genVarM(o *types.Var) {
 }
 
 func (g *ObjcGen) genConstM(o *types.Const) {
-	if _, ok := o.Type().(*types.Basic); !ok || !g.isSupported(o.Type()) {
+	var b *types.Basic
+	if t, ok := o.Type().(*types.Basic); ok {
+		b = t
+	} else if t, ok := o.Type().(*types.Named); ok {
+		if ok, subtype := g.isAlias(t); ok {
+			b = subtype
+		}
+	}
+
+	if b == nil || !g.isSupported(b) {
 		g.Printf("// skipped const %s with unsupported type: %s\n\n", o.Name(), o.Type())
 		return
 	}
 	cName := fmt.Sprintf("%s%s", g.namePrefix, o.Name())
 	objcType := g.objcType(o.Type())
 
-	switch b := o.Type().(*types.Basic); b.Kind() {
+	switch b.Kind() {
 	case types.Bool, types.UntypedBool:
 		v := "NO"
 		if constant.BoolVal(o.Val()) {
@@ -703,6 +728,13 @@ func (g *ObjcGen) genWrite(varName string, t types.Type, mode varMode) {
 		switch u := t.Underlying().(type) {
 		case *types.Interface:
 			g.genRefWrite(varName)
+		case *types.Basic:
+			switch u.Kind() {
+			case types.String:
+				g.Printf("%s _%s = go_seq_from_objc_string(%s);\n", g.objcType(t), varName, varName)
+			default:
+				g.Printf("%s _%s = (%s)%s;\n", g.objcType(t), varName, g.objcType(t), varName)
+			}
 		default:
 			g.errorf("unsupported named type: %s / %T", u, u)
 		}
@@ -774,9 +806,18 @@ func (g *ObjcGen) genRead(toName, fromName string, t types.Type, mode varMode) {
 			g.errorf("unsupported type %s", t)
 		}
 	case *types.Named:
-		switch t.Underlying().(type) {
+		switch u:= t.Underlying().(type) {
 		case *types.Interface, *types.Pointer:
 			g.genRefRead(toName, fromName, t)
+		case *types.Basic:
+			switch u.Kind() {
+			case types.String:
+				g.Printf("%s *%s = go_seq_to_objc_string(%s);\n", g.objcType(t), toName, fromName)
+			case types.Bool:
+				g.Printf("%s %s = %s ? YES : NO;\n", g.objcType(t), toName, fromName)
+			default:
+				g.Printf("%s %s = (%s)%s;\n", g.objcType(t), toName, g.objcType(t), fromName)
+			}
 		default:
 			g.errorf("unsupported, direct named type %s", t)
 		}
@@ -1378,6 +1419,10 @@ func (g *ObjcGen) objcType(typ types.Type) string {
 			}
 		case *types.Struct:
 			return g.namePrefixOf(n.Pkg()) + n.Name()
+		case *types.Basic:
+			if g.isSupported(t) {
+				return g.namePrefixOf(n.Pkg()) + n.Name()
+			}
 		}
 		g.errorf("unsupported, named type %s", typ)
 		return "TODO"
-- 
2.37.1 (Apple Git-137.1)

