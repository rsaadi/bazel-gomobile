From 32dd0f8443f1ce033ae4c0e0ea3f7159fce5cabf Mon Sep 17 00:00:00 2001
From: Rachid Saadi <rach.saadi@gmail.com>
Date: Thu, 30 Mar 2023 14:20:03 +0200
Subject: [PATCH] Add array support for ios

---
 bind/gen.go                    |  4 ++
 bind/gengo.go                  | 58 +++++++++++++++++++++++++++-
 bind/genobjc.go                | 48 +++++++++++++++++++----
 bind/objc/seq_darwin.h         | 11 ++++++
 bind/objc/seq_darwin.m.support | 54 ++++++++++++++++++++++++++
 bind/seq.go.support            | 69 ++++++++++++++++++++++++++++++++++
 6 files changed, 235 insertions(+), 9 deletions(-)

diff --git a/bind/gen.go b/bind/gen.go
index c1173cf..0e19c29 100644
--- a/bind/gen.go
+++ b/bind/gen.go
@@ -417,6 +417,8 @@ func (g *Generator) cgoType(t types.Type) string {
 			default:
 				g.errorf("unsupported slice type: %s", t)
 			}
+		case *types.Pointer:
+			return "int32_t"
 		default:
 			g.errorf("unsupported slice type: %s", t)
 		}
@@ -535,6 +537,8 @@ func (g *Generator) isSupported(t types.Type) bool {
 		switch e := t.Elem().(type) {
 		case *types.Basic:
 			return e.Kind() == types.Uint8
+		case *types.Pointer:
+			return g.isSupported(e)
 		}
 	case *types.Pointer:
 		switch t := t.Elem().(type) {
diff --git a/bind/gengo.go b/bind/gengo.go
index aef5822..3b87c33 100644
--- a/bind/gengo.go
+++ b/bind/gengo.go
@@ -119,6 +119,16 @@ func (g *goGen) genWrite(toVar, fromVar string, t types.Type, mode varMode) {
 			default:
 				g.errorf("unsupported type: %s", t)
 			}
+		case *types.Pointer:
+			switch u := e.Elem().(type) {
+			case *types.Named:
+				o := u.Obj()
+				oPkg := o.Pkg()
+				ptype := g.pkgName(oPkg) + o.Name()
+				g.genToArrayRefNum(toVar, fromVar, ptype)
+			default:
+				g.errorf("unsupported type: %s", t)
+			}
 		default:
 			g.errorf("unsupported type: %s", t)
 		}
@@ -155,6 +165,17 @@ func (g *goGen) genToRefNum(toVar, fromVar string) {
 	g.Printf("}\n")
 }
 
+// genToRefNum generates Go code for converting a variable to its refnum.
+// Note that the nil-check cannot be lifted into seq.ToRefNum, because a nil
+// struct pointer does not convert to a nil interface.
+func (g *goGen) genToArrayRefNum(toVar, fromVar, ptype string) {
+	g.Printf("var %s C.int32_t = _seq.NullRefNum\n", toVar)
+	g.Printf("if %s != nil {\n", fromVar)
+	g.Printf("	a := NewGoArrayWrapper[%s](%s) \n", ptype, fromVar)
+	g.Printf("	%s = C.int32_t(_seq.ToRefNum(a))\n", toVar)
+	g.Printf("}\n")
+}
+
 func (g *goGen) genFuncSignature(o *types.Func, objName string) {
 	g.Printf("//export proxy%s_%s_%s\n", g.pkgPrefix, objName, o.Name())
 	g.Printf("func proxy%s_%s_%s(", g.pkgPrefix, objName, o.Name())
@@ -405,6 +426,26 @@ func (g *goGen) genRead(toVar, fromVar string, typ types.Type, mode varMode) {
 			default:
 				g.errorf("unsupported type: %s", t)
 			}
+		case *types.Pointer:
+			switch u := e.Elem().(type) {
+			case *types.Named:
+				o := u.Obj()
+				oPkg := o.Pkg()
+				if !g.validPkg(oPkg) {
+					g.errorf("type %s is defined in %s, which is not bound", u, oPkg)
+					return
+				}
+				g.Printf("// Must be a Go object\n")
+				g.Printf("var %s []*%s%s\n", toVar, g.pkgName(oPkg), o.Name())
+				g.Printf("if %s_ref := _seq.FromRefNum(int32(%s)); %s_ref != nil {\n", toVar, fromVar, toVar)
+				g.Printf("  if %s_wrapper := %s_ref.Get().(*GOArrayWrapper); %s_wrapper != nil {\n", toVar, toVar, toVar)
+				g.Printf("		%s = ExtractGoArray[%s%s](%s_wrapper) \n", toVar, g.pkgName(oPkg), o.Name(), toVar)
+				g.Printf("	}\n")
+				g.Printf("}\n")
+			default:
+				g.errorf("unsupported pointer type %s", u)
+
+			}
 		default:
 			g.errorf("unsupported type: %s", t)
 		}
@@ -494,11 +535,15 @@ func (g *goGen) typeString(typ types.Type) string {
 			return "TODO"
 		}
 
-		switch t.Underlying().(type) {
+		switch u := t.Underlying().(type) {
 		case *types.Interface, *types.Struct:
 			return fmt.Sprintf("%s%s", g.pkgName(oPkg), types.TypeString(typ, types.RelativeTo(oPkg)))
+		case *types.Basic:
+			if ok, _ := g.isAlias(t); ok {
+				return fmt.Sprintf("%s%s", g.pkgName(oPkg), types.TypeString(typ, types.RelativeTo(oPkg)))
+			}
 		default:
-			g.errorf("unsupported named type %s / %T", t, t)
+			g.errorf("unsupported named type %s / %T", t, u)
 		}
 	case *types.Pointer:
 		switch t := t.Elem().(type) {
@@ -507,6 +552,15 @@ func (g *goGen) typeString(typ types.Type) string {
 		default:
 			g.errorf("not yet supported, pointer type %s / %T", t, t)
 		}
+	case *types.Slice:
+		switch e := t.Elem().(type) {
+		case *types.Basic:
+			return types.TypeString(typ, types.RelativeTo(pkg))
+		case *types.Pointer:
+			return "[]" + g.typeString(e)
+		default:
+			g.errorf("not yet supported, pointer type %s / %T", t, t)
+		}
 	default:
 		return types.TypeString(typ, types.RelativeTo(pkg))
 	}
diff --git a/bind/genobjc.go b/bind/genobjc.go
index 5de39d6..fd2bf01 100644
--- a/bind/genobjc.go
+++ b/bind/genobjc.go
@@ -721,6 +721,8 @@ func (g *ObjcGen) genWrite(varName string, t types.Type, mode varMode) {
 			default:
 				g.errorf("unsupported type: %s", t)
 			}
+		case *types.Pointer:
+			g.genArrayRefWrite(varName, e)
 		default:
 			g.errorf("unsupported type: %s", t)
 		}
@@ -759,6 +761,12 @@ func (g *ObjcGen) genRefWrite(varName string) {
 	g.Printf("}\n")
 }
 
+func (g *ObjcGen) genArrayRefWrite(varName string, t types.Type) {
+	ptype := g.refTypeBase(t)
+	g.Printf("NSArrayWrapper<%s *> * %s_wrapper = [[NSArrayWrapper<%s *> alloc] initWithArray:%s];\n", ptype, varName, ptype, varName)
+	g.Printf("int32_t _%s = go_seq_go_to_refnum(%s_wrapper._ref);\n", varName, varName)
+}
+
 func (g *ObjcGen) genRefRead(toName, fromName string, t types.Type) {
 	ptype := g.refTypeBase(t)
 	g.Printf("%s* %s = nil;\n", ptype, toName)
@@ -775,6 +783,23 @@ func (g *ObjcGen) genRefRead(toName, fromName string, t types.Type) {
 	g.Printf("}\n")
 }
 
+func (g *ObjcGen) genArrayRefRead(toName, fromName string, t types.Type) {
+	ptype := g.refTypeBase(t)
+	g.Printf("NSArray<%s *> * %s = nil;\n", ptype, toName)
+	g.Printf("GoSeqRef* %s_ref = go_seq_from_refnum(%s);\n", toName, fromName)
+	g.Printf("if (%s_ref != NULL) {\n", toName)
+	g.Printf("	%s = %s_ref.obj;\n", toName, toName)
+	g.Printf("	if (%s == nil) {\n", toName)
+	if isObjcType(t) {
+		g.Printf("		LOG_FATAL(@\"unexpected NULL reference\");\n")
+	} else {
+		g.Printf("		NSArrayWrapper<%s *> *%s_wrapper = [[NSArrayWrapper<%s *> alloc] initWithRef:%s_ref];\n", ptype, toName, ptype, toName)
+		g.Printf("		%s = [%s_wrapper array:[%s class]];\n", toName, toName, ptype)
+	}
+	g.Printf("	}\n")
+	g.Printf("}\n")
+}
+
 func (g *ObjcGen) genRead(toName, fromName string, t types.Type, mode varMode) {
 	switch t := t.(type) {
 	case *types.Basic:
@@ -795,6 +820,8 @@ func (g *ObjcGen) genRead(toName, fromName string, t types.Type, mode varMode) {
 			default:
 				g.errorf("unsupported type: %s", t)
 			}
+		case *types.Pointer:
+			g.genArrayRefRead(toName, fromName, e)
 		default:
 			g.errorf("unsupported type: %s", t)
 		}
@@ -806,7 +833,7 @@ func (g *ObjcGen) genRead(toName, fromName string, t types.Type, mode varMode) {
 			g.errorf("unsupported type %s", t)
 		}
 	case *types.Named:
-		switch u:= t.Underlying().(type) {
+		switch u := t.Underlying().(type) {
 		case *types.Interface, *types.Pointer:
 			g.genRefRead(toName, fromName, t)
 		case *types.Basic:
@@ -1385,13 +1412,20 @@ func (g *ObjcGen) objcType(typ types.Type) string {
 			return "TODO"
 		}
 	case *types.Slice:
-		elem := g.objcType(typ.Elem())
-		// Special case: NSData seems to be a better option for byte slice.
-		if elem == "byte" {
-			return "NSData* _Nullable"
+		switch e := typ.Elem().(type) {
+		case *types.Basic:
+			switch e.Kind() {
+			case types.Uint8:
+				// Special case: NSData seems to be a better option for byte slice.
+				return "NSData* _Nullable"
+			default:
+				g.errorf("unsupported slice type: %s", typ)
+			}
+		case *types.Named:
+			return "NSArray<" + g.objcType(e) + " *> *"
+		case *types.Pointer:
+			return "NSArray<" + g.objcType(e.Elem()) + " *> * _Nullable"
 		}
-		// TODO(hyangah): support other slice types: NSArray or CFArrayRef.
-		// Investigate the performance implication.
 		g.errorf("unsupported type: %s", typ)
 		return "TODO"
 	case *types.Pointer:
diff --git a/bind/objc/seq_darwin.h b/bind/objc/seq_darwin.h
index 1aeec4a..c3aacaa 100644
--- a/bind/objc/seq_darwin.h
+++ b/bind/objc/seq_darwin.h
@@ -25,6 +25,17 @@
                               userInfo:NULL];                                  \
   }
 
+@interface NSArrayWrapper<T> : NSObject <goSeqRefInterface> {
+}
+
+@property(strong, readonly) id _ref;
+
+- (instancetype)initWithRef:(id)ref;
+- (instancetype)initWithArray:(NSArray<T> *)array;
+- (NSArray<T> *)array:(Class)class;
+
+@end
+
 // Platform specific types
 typedef struct nstring {
 	void *ptr;
diff --git a/bind/objc/seq_darwin.m.support b/bind/objc/seq_darwin.m.support
index 917a4ef..3f818ed 100644
--- a/bind/objc/seq_darwin.m.support
+++ b/bind/objc/seq_darwin.m.support
@@ -379,3 +379,57 @@ nstring go_seq_from_objc_string(NSString *s) {
 }
 
 @end
+
+@implementation NSArrayWrapper {
+}
+
+- (nonnull instancetype)initWithRef:(_Nonnull id)ref {
+	self = [super init];
+	if (self) { __ref = ref; }
+	return self;
+}
+
+- (nonnull instancetype)initWithArray:(NSArray *)array {
+    self = [super init];
+    if (self) {
+        __ref = go_seq_from_refnum(new_go_array_wrapper());
+    }
+    [self loadArray:array];
+    return self;
+}
+
+- (void)loadArray:(NSArray *)array {
+    for (id v in array) {
+        int32_t _v;
+    	if ([v conformsToProtocol:@protocol(goSeqRefInterface)]) {
+    		id<goSeqRefInterface> v_proxy = (id<goSeqRefInterface>)(v);
+    		_v = go_seq_go_to_refnum(v_proxy._ref);
+    	} else {
+    		_v = go_seq_to_refnum(v);
+    	}
+    	int32_t refnum = go_seq_go_to_refnum(self._ref);
+        proxyseq_array_wrapper_append_ref_value(refnum , _v);
+    }
+}
+
+- (NSArray *)array:(Class)class {
+	int32_t refnum = go_seq_go_to_refnum(self._ref);
+	int length = proxyseq_array_wrapper_length(refnum);
+    NSMutableArray *array = [NSMutableArray arrayWithCapacity:length];
+    for (int i = 0; i < length; i++) {
+        refnum = go_seq_go_to_refnum(self._ref);
+        int32_t r0 = proxyseq_array_wrapper_value_at_index(refnum, i);
+        id _r0 = [NSNull null];
+        GoSeqRef* _r0_ref = go_seq_from_refnum(r0);
+        if (_r0_ref != NULL) {
+            _r0 = _r0_ref.obj;
+        	if (_r0 == nil) {
+        		_r0 = [[class alloc] initWithRef:_r0_ref];
+        	}
+        }
+        array[i] = _r0;
+    }
+    return array;
+}
+
+@end
diff --git a/bind/seq.go.support b/bind/seq.go.support
index 392ec09..7b1b13b 100644
--- a/bind/seq.go.support
+++ b/bind/seq.go.support
@@ -49,4 +49,73 @@ func IncGoRef(refnum C.int32_t) {
 	_seq.Inc(int32(refnum))
 }
 
+type GOArrayWrapper struct {
+	arrayRefNum []int32
+}
+
+func NewGoArrayWrapper[T any](array []*T) *GOArrayWrapper {
+    _v := GOArrayWrapper{}
+    for _, v := range(array) {
+        var __v int32 = _seq.NullRefNum
+        if v != nil {
+        	__v = _seq.ToRefNum(v)
+        }
+        _v.arrayRefNum = append(_v.arrayRefNum, __v)
+    }
+    return &_v
+}
+
+func ExtractGoArray[T any](wrapper *GOArrayWrapper) []*T {
+	var _v []*T
+	for _, v := range(wrapper.arrayRefNum) {
+		var __v *T
+		if __v_ref := _seq.FromRefNum(v); __v_ref != nil {
+			if __v = __v_ref.Get().(*T) ; __v != nil {
+				_v = append(_v, __v)
+			}
+		}
+	}
+	return _v
+}
+
+func (gaw *GOArrayWrapper)length() int {
+	return len(gaw.arrayRefNum)
+}
+
+func (gaw *GOArrayWrapper)valueAtIndex(idx int) int32 {
+	return gaw.arrayRefNum[idx]
+}
+
+func (gaw *GOArrayWrapper)appendRefValue(refValue int32) {
+	gaw.arrayRefNum = append(gaw.arrayRefNum, refValue)
+}
+
+//export new_go_array_wrapper
+func new_go_array_wrapper() C.int32_t {
+	return C.int32_t(_seq.ToRefNum(new(GOArrayWrapper)))
+}
+
+//export proxyseq_array_wrapper_length
+func proxyseq_array_wrapper_length(refnum C.int32_t) C.int {
+    ref := _seq.FromRefNum(int32(refnum))
+	v := ref.Get().(*GOArrayWrapper)
+	_v := C.int(v.length())
+    return _v
+}
+
+//export proxyseq_array_wrapper_value_at_index
+func proxyseq_array_wrapper_value_at_index(refnum C.int32_t, index C.int) C.int32_t {
+    ref := _seq.FromRefNum(int32(refnum))
+	v := ref.Get().(*GOArrayWrapper)
+	_v := C.int32_t(v.valueAtIndex(int(index)))
+	return _v
+}
+
+//export proxyseq_array_wrapper_append_ref_value
+func proxyseq_array_wrapper_append_ref_value(refnum C.int32_t, refValue C.int32_t) {
+    ref := _seq.FromRefNum(int32(refnum))
+	v := ref.Get().(*GOArrayWrapper)
+	v.appendRefValue(int32(refValue))
+}
+
 func main() {}
-- 
2.39.1

